{:package "bisection-key",
 :root {:ns "main", :def "main!"},
 :files {"main" {:ns ["ns"
                      "bisection-key.main"
                      [":require"
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "bisection-key.core" ":refer" ["[]" "bisect" "min-id" "max-id" "mid-id"]]]],
                 :defs {"main!" ["defn" "main!" [] ["run-bisection!"] ["println" "|App started."]],
                        "reload!" ["defn" "reload!" [] ["run-bisection!"] ["println" "|Code updated."]],
                        "run-bisection!" ["defn"
                                          "run-bisection!"
                                          []
                                          ["println" ["bisect" "|1" "|2"]]
                                          ["println" ["bisect" "|1" "|3"]]
                                          ["println" ["bisect" "|1" "|4"]]
                                          ["println" ["bisect" "|1" "|5"]]
                                          ["println" ["bisect" "|11" "|12"]]
                                          ["println" ["bisect" "|11" "|13"]]
                                          ["println" ["bisect" "|11" "|14"]]
                                          ["println" ["bisect" "|11" "|15"]]
                                          ["loop"
                                           ["[]" "i" "0" "x" "mid-id"]
                                           ["let"
                                            [["new-id" ["bisect" "x" "max-id"]]]
                                            ["println" "|max:" "new-id"]
                                            ["if" ["<" "i" "40"] ["recur" ["inc" "i"] "new-id"]]]]
                                          ["loop"
                                           ["[]" "i" "0" "x" "max-id"]
                                           ["let"
                                            [["new-id" ["bisect" "min-id" "x"]]]
                                            ["println" "|min:" "new-id"]
                                            ["if" ["<" "i" "40"] ["recur" ["inc" "i"] "new-id"]]]]
                                          ["loop"
                                           ["[]" "i" "0" "x" "mid-id"]
                                           ["let"
                                            [["yes?" [">" ["js/Math.random"] "0.5"]]
                                             ["new-id" ["if" "yes?" ["bisect" "x" "max-id"] ["bisect" "min-id" "x"]]]]
                                            ["println"
                                             "|random:"
                                             "yes?"
                                             ["=" "-1" ["compare" "x" "new-id"]]
                                             "x"
                                             "new-id"]
                                            ["if" ["<" "i" "10"] ["recur" ["inc" "i"] "new-id"]]]]]},
                 :procs []},
         "core" {:ns ["ns"
                      "bisection-key.core"
                      [":require" ["[]" "clojure.string" ":as" "string"] ["[]" "clojure.set" ":as" "set"]]],
                 :defs {"bisect" ["defn"
                                  "bisect"
                                  ["" "x" "y"]
                                  ["assert"
                                   ["and" ["string?" "x"] ["string?" "y"]]
                                   "|[bitsect] arguments should be strings!"]
                                  ["assert" ["not=" "x" "y"] "|[bisection] keys are identical!"]
                                  ["assert" ["neg?" ["compare" "x" "y"]] "|[bisection] x > y"]
                                  ["let"
                                   [["xs" ["str->vec" "x"]] ["ys" ["str->vec" "y"]]]
                                   ["vec->str" ["bisect-vec" "xs" "ys" ["[]"]]]]],
                        "trim-right" ["defn"
                                      "trim-right"
                                      ["x"]
                                      ["let"
                                       [["end" ["dec" ["count" "x"]]]]
                                       ["if" ["=" "|+" ["subs" "x" "end"]] ["recur" ["subs" "x" "0" "end"]] "x"]]],
                        "int->char-map" ["def"
                                         "int->char-map"
                                         ["->>"
                                          ["string/split" "dictionary" "|"]
                                          ["map-indexed" ["fn" ["idx" "char"] ["[]" "idx" "char"]]]
                                          ["into" ["{}"]]]],
                        "max-id" ["def" "max-id" ["vec->str" ["[]" "64"]]],
                        "char->int-map" ["def" "char->int-map" ["set/map-invert" "int->char-map"]],
                        "str->vec" ["defn"
                                    "str->vec"
                                    ["x"]
                                    ["->>"
                                     ["string/split" "x" "|"]
                                     ["map" ["fn" ["char"] ["get" "char->int-map" "char"]]]
                                     ["into" ["[]"]]]],
                        "bisect-vec" ["defn"
                                      "bisect-vec"
                                      ["xs" "ys" "result"]
                                      ["if"
                                       ["and" ["empty?" "xs"] ["empty?" "ys"]]
                                       "result"
                                       ["let"
                                        [["x" ["or" ["first" "xs"] "0"]] ["y" ["or" ["first" "ys"] "0"]]]
                                        ["cond"
                                         [["=" "x" "y"] ["recur" ["rest" "xs"] ["rest" "ys"] ["conj" "result" "x"]]]
                                         [["=" "1" ["-" "y" "x"]]
                                          ["let"
                                           [["rest-ys" ["rest" "ys"]]]
                                           ["recur"
                                            ["rest" "xs"]
                                            ["cons" ["or" ["first" "rest-ys"] "64"] ["rest" "rest-ys"]]
                                            ["conj" "result" "x"]]]]
                                         [":else"
                                          ["recur"
                                           ["rest" "xs"]
                                           ["rest" "ys"]
                                           ["conj" "result" ["bit-shift-right" ["+" "x" "y"] "1"]]]]]]]],
                        "vec->str" ["defn"
                                    "vec->str"
                                    ["xs"]
                                    ["->>"
                                     "xs"
                                     ["map" ["fn" ["x"] ["get" "int->char-map" "x"]]]
                                     ["string/join" "|"]
                                     ["trim-right"]]],
                        "min-id" ["def" "min-id" ["vec->str" ["[]" "0"]]],
                        "dictionary" ["def"
                                      "dictionary"
                                      ["str"
                                       "|+-/"
                                       "|0123456789"
                                       "|ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                       "|abcdefghijklmnopqrstuvwxyz"]],
                        "mid-id" ["def" "mid-id" ["vec->str" ["[]" "32"]]]},
                 :procs []}}}
