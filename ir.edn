{:package "bisection-key",
 :root {:ns "main", :def "main!"},
 :files {"main" {:ns ["ns"
                      "bisection-key.main"
                      [":require"
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "bisection-key.core" ":refer" ["[]" "bisect"]]]],
                 :defs {"main!" ["defn" "main!" [] ["run-bisection!"] ["println" "|App started."]],
                        "reload!" ["defn" "reload!" [] ["run-bisection!"] ["println" "|Code updated."]],
                        "run-bisection!" ["defn"
                                          "run-bisection!"
                                          []
                                          ["println" ["bisect" "|1" "|2"]]
                                          ["println" ["bisect" "|1" "|3"]]
                                          ["println" ["bisect" "|1" "|4"]]
                                          ["println" ["bisect" "|1" "|5"]]
                                          ["println" ["bisect" "|11" "|12"]]
                                          ["println" ["bisect" "|11" "|13"]]
                                          ["println" ["bisect" "|11" "|14"]]
                                          ["println" ["bisect" "|11" "|15"]]]},
                 :procs [["set!" [".-onload" "js/window"] "main!"]]},
         "render" {:ns ["ns"
                        "bisection-key.render"
                        [":require"
                         ["[]" "respo.render.html" ":refer" ["[]" "make-string"]]
                         ["[]" "shell-page.core" ":refer" ["[]" "make-page" "spit" "slurp"]]
                         ["[]" "bisection-key.schema" ":as" "schema"]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["dev-page"]]
                                    ["spit" "|dist/index.html" ["prod-page"]]]],
                          "base-info" ["def"
                                       "base-info"
                                       ["{}"
                                        [":title" "|Bisection"]
                                        [":icon" "|http://logo.mvc-works.org/mvc.png"]
                                        [":ssr" "nil"]
                                        [":inner-html" "nil"]]],
                          "dev-page" ["defn"
                                      "dev-page"
                                      []
                                      ["make-page"
                                       "|"
                                       ["merge"
                                        "base-info"
                                        ["{}"
                                         [":styles" ["[]"]]
                                         [":scripts" ["[]" "|/main.js" "|/browser/lib.js" "|/browser/main.js"]]]]]],
                          "prod-page" ["defn"
                                       "prod-page"
                                       []
                                       ["let"
                                        [["html-content" "|"]
                                         ["manifest" [".parse" "js/JSON" ["slurp" "|dist/assets-manifest.json"]]]
                                         ["cljs-manifest" [".parse" "js/JSON" ["slurp" "|dist/manifest.json"]]]]
                                        ["make-page"
                                         "html-content"
                                         ["merge"
                                          "base-info"
                                          ["{}"
                                           [":styles" ["[]" ["aget" "manifest" "|main.css"]]]
                                           [":scripts"
                                            ["[]"
                                             ["aget" "manifest" "|main.js"]
                                             ["->" "cljs-manifest" ["aget" "0"] ["aget" "|js-name"]]
                                             ["->" "cljs-manifest" ["aget" "1"] ["aget" "|js-name"]]]]]]]]]},
                   :procs []},
         "schema" {:ns ["ns" "bisection-key.schema"],
                   :defs {"store" ["def" "store" ["{}" [":states" ["{}"]] [":data" "0"]]]},
                   :procs []},
         "core" {:ns ["ns" "bisection-key.core" [":require" ["[]" "clojure.string" ":as" "string"]]],
                 :defs {"bisect" ["defn"
                                  "bisect"
                                  ["" "x" "y"]
                                  ["if" ["=" "x" "y"] ["throw" ["js/Error" "|[bisection] keys are identical!"]]]
                                  ["if" ["pos?" ["compare" "x" "y"]] ["throw" ["js/Error." "|[bisection] x > y"]]]
                                  ["let"
                                   [["xs" ["str->vec" "x"]] ["ys" ["str->vec" "y"]]]
                                   ["vec->str" ["bisect-vec" "xs" "ys" ["[]"]]]]],
                        "int->char-map" ["def"
                                         "int->char-map"
                                         ["->>"
                                          ["string/split" "dictionary" "|"]
                                          ["map-indexed" ["fn" ["idx" "char"] ["[]" "idx" "char"]]]
                                          ["into" ["{}"]]]],
                        "max-id" ["def" "max-id" ["vec->str" ["[]" "64"]]],
                        "char->int-map" ["def"
                                         "char->int-map"
                                         ["->>"
                                          ["string/split" "dictionary" "|"]
                                          ["map-indexed" ["fn" ["idx" "char"] ["[]" "char" "idx"]]]
                                          ["into" ["{}"]]]],
                        "str->vec" ["defn"
                                    "str->vec"
                                    ["x"]
                                    ["->>"
                                     ["string/split" "x" "|"]
                                     ["map" ["fn" ["char"] ["get" "char->int-map" "char"]]]
                                     ["into" ["[]"]]]],
                        "bisect-vec" ["defn"
                                      "bisect-vec"
                                      ["xs" "ys" "result"]
                                      ["if"
                                       ["and" ["empty?" "xs"] ["empty?" "ys"]]
                                       ["throw" ["js/Error." "|[bisection] lack of information!"]]
                                       ["let"
                                        [["x" ["or" ["first" "xs"] "0"]] ["y" ["or" ["first" "ys"] "0"]]]
                                        ["cond"
                                         [["=" "x" "y"] ["recur" ["rest" "xs"] ["rest" "ys"] ["conj" "result" "x"]]]
                                         [["=" "1" ["-" "y" "x"]] ["conj" "result" "x" "32"]]
                                         [":else"
                                          ["conj" "result" ["js/Math.round" ["bit-shift-right" ["+" "x" "y"] "1"]]]]]]]],
                        "vec->str" ["defn"
                                    "vec->str"
                                    ["xs"]
                                    ["->>" "xs" ["map" ["fn" ["x"] ["get" "int->char-map" "x"]]] ["string/join" "|"]]],
                        "min-id" ["def" "min-id" ["vec->str" ["[]" "0"]]],
                        "dictionary" ["def"
                                      "dictionary"
                                      ["str"
                                       "|+-/"
                                       "|0123456789"
                                       "|ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                       "|abcdefghijklmnopqrstuvwxyz"]],
                        "mid-id" ["def" "mid-id" ["vec->str" ["[]" "32"]]]},
                 :procs []}}}
